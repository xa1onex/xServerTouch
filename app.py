import logging
import subprocess
import os
import sys
import json
from datetime import datetime
from pathlib import Path
from typing import Optional, Tuple, Dict, Any
import platform

from aiogram import Bot, Dispatcher, F, Router, types
from aiogram.enums import ParseMode
from aiogram.filters import Command, CommandObject
from aiogram.types import Message, BufferedInputFile, CallbackQuery
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.utils.keyboard import InlineKeyboardBuilder
from aiogram.client.default import DefaultBotProperties

from dotenv import load_dotenv

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    handlers=[
        logging.FileHandler('bot.log'),
        logging.StreamHandler()
    ]
)
logger = logging.getLogger(__name__)

load_dotenv()

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –±–æ—Ç–∞
API_TOKEN = os.getenv('TELEGRAM_BOT_TOKEN')
if not API_TOKEN:
    logger.error("–ù–µ —É–∫–∞–∑–∞–Ω TELEGRAM_BOT_TOKEN –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è")
    sys.exit(1)

ADMIN_IDS = [int(id_) for id_ in os.getenv('ADMIN_IDS', '').split(',') if id_]
if not ADMIN_IDS:
    logger.error("–ù–µ —É–∫–∞–∑–∞–Ω—ã ADMIN_IDS –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è")
    sys.exit(1)

MAX_MESSAGE_LENGTH = 4000
DEFAULT_DOWNLOAD_DIR = "/tmp/bot_uploads"
COMMANDS_FILE = "commands.json"

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
bot = Bot(token=API_TOKEN, default=DefaultBotProperties(parse_mode=ParseMode.HTML))
dp = Dispatcher()


# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è FSM
class FileStates(StatesGroup):
    waiting_for_file = State()
    waiting_for_file_path = State()
    waiting_for_download_path = State()


# –ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–º–∞–Ω–¥ –∏–∑ JSON
def load_commands() -> Dict[str, Any]:
    try:
        with open(COMMANDS_FILE, 'r', encoding='utf-8') as f:
            return json.load(f)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ–º–∞–Ω–¥: {e}")
        return {}


# –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∑–∞–ø—É—Å–∫–µ
start_time = datetime.now()
bot_version = "3.0"
commands_config = load_commands()

# –ú–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ç–æ—Ä—ã
admin_router = Router()
file_router = Router()
command_router = Router()


# –§–∏–ª—å—Ç—Ä –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∞–¥–º–∏–Ω–∞
async def is_admin(user_id: int) -> bool:
    return user_id in ADMIN_IDS


def split_long_message(text: str, max_length: int = MAX_MESSAGE_LENGTH) -> list[str]:
    if len(text) <= max_length:
        return [text]

    lines = text.split('\n')
    chunks = []
    current_chunk = ""

    for line in lines:
        if len(current_chunk) + len(line) + 1 > max_length:
            if current_chunk:
                chunks.append(current_chunk)
                current_chunk = line
            else:
                chunks.extend([line[i:i + max_length] for i in range(0, len(line), max_length)])
        else:
            if current_chunk:
                current_chunk += "\n" + line
            else:
                current_chunk = line

    if current_chunk:
        chunks.append(current_chunk)

    return chunks


def get_cancel_keyboard() -> types.InlineKeyboardMarkup:
    builder = InlineKeyboardBuilder()
    builder.button(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel_action")
    return builder.as_markup()


async def execute_shell_command(command: str) -> Tuple[str, str, int]:
    try:
        result = subprocess.run(
            command,
            shell=True,
            executable='/bin/bash',
            stdout=subprocess.PIPE,
            stderr=subprocess.PIPE,
            text=True
        )
        return (
            result.stdout.strip() if result.stdout else "",
            result.stderr.strip() if result.stderr else "",
            result.returncode
        )
    except Exception as e:
        return "", str(e), -1


async def notify_admins(bot: Bot):
    for admin_id in ADMIN_IDS:
        try:
            await bot.send_message(
                admin_id,
                f"üü¢ –ë–æ—Ç v{bot_version} –∑–∞–ø—É—â–µ–Ω!\n"
                f"‚è∞ –í—Ä–µ–º—è –∑–∞–ø—É—Å–∫–∞: {start_time.strftime('%Y-%m-%d %H:%M:%S')}\n"
                f"üêç Python: {sys.version.split()[0]}\n"
                f"üíª –°–µ—Ä–≤–µ—Ä: \n"
                f"  system: {platform.uname().system}\n"
                f"  node: {platform.uname().node}\n"
                f"  version: {platform.uname().version}"
            )
        except Exception as e:
            logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω—É {admin_id}: {e}")


# ==================== –û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã ====================

@admin_router.message(Command("data"))
@admin_router.message(Command("start"))
async def cmd_start_data(message: Message):
    if not await is_admin(message.from_user.id):
        return

    uptime = datetime.now() - start_time
    uptime_str = str(uptime).split('.')[0]

    help_text = (
        f"üñ•Ô∏è <b>–ë–æ—Ç —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–µ—Ä–≤–µ—Ä–æ–º v{bot_version}</b>\n\n"
        f"‚è± –í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã: <code>{uptime_str}</code>\n"
        f"üÜî –í–∞—à ID: <code>{message.from_user.id}</code>\n\n"
        "üìã <b>–û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:</b>\n"
        "/status - –°—Ç–∞—Ç—É—Å —Å–µ—Ä–≤–µ—Ä–∞\n"
        "/disk - –î–∏—Å–∫–æ–≤–æ–µ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–æ\n"
        "/memory - –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –ø–∞–º—è—Ç–∏\n\n"
        "üìÅ <b>–†–∞–±–æ—Ç–∞ —Å —Ñ–∞–π–ª–∞–º–∏:</b>\n"
        "/upload - –ó–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–∞–π–ª –Ω–∞ —Å–µ—Ä–≤–µ—Ä\n"
        "/download - –°–∫–∞—á–∞—Ç—å —Ñ–∞–π–ª —Å —Å–µ—Ä–≤–µ—Ä–∞\n\n"
        "‚öôÔ∏è <b>–î—Ä—É–≥–∏–µ –∫–æ–º–∞–Ω–¥—ã:</b>\n"
        "/reboot - –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∞ —Å–∏—Å—Ç–µ–º—ã\n"
        "/execute - –í—ã–ø–æ–ª–Ω–∏—Ç—å –∫–æ–º–∞–Ω–¥—É\n\n"
        "–î–∞–Ω–Ω—ã–µ:\n"
        "IP: 77.110.103.180\n"
        "Name: root\n"
        "Password: <code>fsJO0s6lRrxW</code>\n"
        "ssh: <code>ssh root@77.110.103.180</code>"
    )
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–º–∞–Ω–¥—ã –∏–∑ –∫–æ–Ω—Ñ–∏–≥–∞
    if commands_config:
        help_text += "\n\nüõ†Ô∏è <b>–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:</b>"
        for cmd in commands_config.keys():
            help_text += f"\n/{cmd} - {commands_config[cmd]['description']}"

    await message.answer(help_text)


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–æ–º–∞–Ω–¥ –∏–∑ JSON
async def handle_config_command(message: Message, command_name: str):
    if command_name not in commands_config:
        await message.answer("‚ùå –ö–æ–º–∞–Ω–¥–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
        return

    cmd_config = commands_config[command_name]
    results = [cmd_config.get("title", f"<b>üîπ {command_name}:</b>")]

    for name, cmd in cmd_config.items():
        if name == "title" or name == "description":
            continue

        stdout, stderr, retcode = await execute_shell_command(cmd)
        if retcode == 0:
            results.append(f"\n<b>‚Ä¢ {name}:</b>\n<code>{stdout}</code>")
        else:
            results.append(f"\n<b>‚Ä¢ {name}:</b>\n‚ùå –û—à–∏–±–∫–∞: <code>{stderr}</code>")

    full_message = "\n".join(results)
    for chunk in split_long_message(full_message):
        await message.answer(chunk)


# –î–∏–Ω–∞–º–∏—á–µ—Å–∫–∞—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∫–æ–º–∞–Ω–¥ –∏–∑ JSON
for cmd_name in commands_config.keys():
    @admin_router.message(Command(cmd_name))
    async def dynamic_command_handler(message: Message, command: CommandObject):
        if not await is_admin(message.from_user.id):
            return
        await handle_config_command(message, command.command)


# ==================== –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã ====================

@command_router.message(Command("status"))
async def cmd_status(message: Message):
    if not await is_admin(message.from_user.id):
        return

    commands = {
        "–í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã": "uptime",
        "–ù–∞–≥—Ä—É–∑–∫–∞": "cat /proc/loadavg",
        "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏": "who",
        "–î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è": "date",
        "–î–∏—Å–∫–æ–≤–æ–µ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–æ": "df -h | grep -v tmpfs"
    }

    results = ["<b>üîÑ –°—Ç–∞—Ç—É—Å —Å–µ—Ä–≤–µ—Ä–∞:</b>"]
    uptime = datetime.now() - start_time
    uptime_str = str(uptime).split('.')[0]
    results.append(f"\n‚è± <b>–í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã –±–æ—Ç–∞:</b> <code>{uptime_str}</code>")

    for name, cmd in commands.items():
        stdout, stderr, retcode = await execute_shell_command(cmd)
        if retcode == 0:
            results.append(f"\n<b>‚Ä¢ {name}:</b>\n<code>{stdout}</code>")
        else:
            results.append(f"\n<b>‚Ä¢ {name}:</b>\n‚ùå –û—à–∏–±–∫–∞: <code>{stderr}</code>")

    full_message = "\n".join(results)
    for chunk in split_long_message(full_message):
        await message.answer(chunk)


@command_router.message(Command("execute"))
async def cmd_execute(message: Message, command: CommandObject):
    if not await is_admin(message.from_user.id):
        return

    if not command.args:
        await message.answer("‚ÑπÔ∏è –£–∫–∞–∂–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è. –ü—Ä–∏–º–µ—Ä: /execute ls -la")
        return

    cmd = command.args
    await message.answer(f"üîÑ –í—ã–ø–æ–ª–Ω—è—é –∫–æ–º–∞–Ω–¥—É: <code>{cmd}</code>")

    try:
        stdout, stderr, retcode = await execute_shell_command(cmd)

        if retcode != 0:
            raise Exception(stderr if stderr else f"–ö–æ–º–∞–Ω–¥–∞ –≤–µ—Ä–Ω—É–ª–∞ –∫–æ–¥ {retcode}")

        output = stdout if stdout else "‚úÖ –ö–æ–º–∞–Ω–¥–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ, –≤—ã–≤–æ–¥ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç."

        for chunk in split_long_message(output):
            await message.answer(f"<pre>{chunk}</pre>")

    except Exception as e:
        error_msg = f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∫–æ–º–∞–Ω–¥—ã:\n<pre>{str(e)}</pre>"
        await message.answer(error_msg)


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã reboot
@command_router.message(Command("reboot"))
async def cmd_reboot(message: Message):
    if not await is_admin(message.from_user.id):
        return

    # –ü—Ä–æ—Å—Ç–æ–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø–µ—Ä–µ–¥ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–æ–π1
    builder = InlineKeyboardBuilder()
    builder.button(text="‚úÖ –î–∞", callback_data="confirm_reboot")
    builder.button(text="‚ùå –ù–µ—Ç", callback_data="cancel_action")

    await message.answer(
        "‚ö†Ô∏è <b>–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏—Ç—å —Å–µ—Ä–≤–µ—Ä?</b>\n\n"
        "–ë—É–¥–µ—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ –∫–æ–º–∞–Ω–¥–∞: <code>sudo reboot</code>",
        reply_markup=builder.as_markup()
    )


# –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∏
@dp.callback_query(F.data == "confirm_reboot")
async def confirm_reboot(callback: CallbackQuery):
    try:
        # –ü—Ä–æ—Å—Ç–æ –≤—ã–ø–æ–ª–Ω—è–µ–º –∫–æ–º–∞–Ω–¥—É –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∏
        subprocess.run("sudo reboot", shell=True)

        await callback.message.answer("üîÑ –í—ã–ø–æ–ª–Ω—è—é –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫—É —Å–µ—Ä–≤–µ—Ä–∞...")
    except Exception as e:
        await callback.message.answer(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–µ: {str(e)}")

    await callback.answer()


# ==================== –†–∞–±–æ—Ç–∞ —Å —Ñ–∞–π–ª–∞–º–∏ ====================

@file_router.message(Command("upload"))
async def cmd_upload(message: Message, state: FSMContext):
    if not await is_admin(message.from_user.id):
        return

    await message.answer(
        "üì§ –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–∞–π–ª –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –Ω–∞ —Å–µ—Ä–≤–µ—Ä\n"
        "–ò–ª–∏ –Ω–∞–∂–º–∏—Ç–µ ‚ùå –û—Ç–º–µ–Ω–∞ –¥–ª—è –ø—Ä–µ—Ä—ã–≤–∞–Ω–∏—è",
        reply_markup=get_cancel_keyboard()
    )
    await state.set_state(FileStates.waiting_for_file)


@file_router.message(FileStates.waiting_for_file, F.document)
async def handle_file_upload(message: Message, state: FSMContext):
    if not message.document:
        await message.answer("‚ÑπÔ∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–∞–π–ª")
        return

    await state.update_data(file_id=message.document.file_id, file_name=message.document.file_name)
    await message.answer(
        "üìÅ –£–∫–∞–∂–∏—Ç–µ –ø—É—Ç—å –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ñ–∞–π–ª–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä: /home/user/uploads/)\n"
        f"–ü–æ —É–º–æ–ª—á–∞–Ω–∏—é: <code>{DEFAULT_DOWNLOAD_DIR}</code>\n\n"
        "–ò–ª–∏ –Ω–∞–∂–º–∏—Ç–µ ‚ùå –û—Ç–º–µ–Ω–∞ –¥–ª—è –ø—Ä–µ—Ä—ã–≤–∞–Ω–∏—è",
        reply_markup=get_cancel_keyboard()
    )
    await state.set_state(FileStates.waiting_for_file_path)


@file_router.message(FileStates.waiting_for_file_path)
async def handle_file_path(message: Message, state: FSMContext):
    data = await state.get_data()
    file_id = data.get('file_id')
    original_name = data.get('file_name')

    if not file_id or not original_name:
        await message.answer("‚ùå –û—à–∏–±–∫–∞: –¥–∞–Ω–Ω—ã–µ –æ —Ñ–∞–π–ª–µ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
        await state.clear()
        return

    save_path = message.text.strip() if message.text else ""
    if not save_path or save_path.lower() == "cancel":
        save_path = DEFAULT_DOWNLOAD_DIR

    try:
        Path(save_path).mkdir(parents=True, exist_ok=True)
    except Exception as e:
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏: {str(e)}")
        await state.clear()
        return

    full_path = Path(save_path) / original_name

    try:
        file = await bot.get_file(file_id)
        file_path = file.file_path

        await bot.download_file(file_path, str(full_path))

        file_size = os.path.getsize(full_path)
        human_size = f"{file_size / 1024:.2f} KB" if file_size < 1024 * 1024 else f"{file_size / 1024 / 1024:.2f} MB"

        await message.answer(
            f"‚úÖ –§–∞–π–ª —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω:\n"
            f"üìÑ –ò–º—è: <code>{original_name}</code>\n"
            f"üìÇ –ü—É—Ç—å: <code>{full_path}</code>\n"
            f"üìè –†–∞–∑–º–µ—Ä: {human_size}"
        )
    except Exception as e:
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ñ–∞–π–ª–∞: {str(e)}")
    finally:
        await state.clear()


@file_router.message(Command("download"))
async def cmd_download(message: Message, state: FSMContext, command: CommandObject):
    if not await is_admin(message.from_user.id):
        return

    if command.args:
        await handle_download_request(message, command.args)
    else:
        await message.answer(
            "üì• –£–∫–∞–∂–∏—Ç–µ –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è (–Ω–∞–ø—Ä–∏–º–µ—Ä: /var/log/syslog)\n"
            "–ò–ª–∏ –Ω–∞–∂–º–∏—Ç–µ ‚ùå –û—Ç–º–µ–Ω–∞ –¥–ª—è –ø—Ä–µ—Ä—ã–≤–∞–Ω–∏—è",
            reply_markup=get_cancel_keyboard()
        )
        await state.set_state(FileStates.waiting_for_download_path)


@file_router.message(FileStates.waiting_for_download_path)
async def handle_download_path(message: Message, state: FSMContext):
    file_path = message.text.strip() if message.text else ""
    await handle_download_request(message, file_path)
    await state.clear()


async def handle_download_request(message: Message, file_path: str):
    if not file_path or file_path.lower() == "cancel":
        await message.answer("‚ùå –ó–∞–≥—Ä—É–∑–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞")
        return

    try:
        path = Path(file_path)
        if not path.exists():
            await message.answer("‚ùå –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return

        if path.is_dir():
            await message.answer("‚ùå –£–∫–∞–∑–∞–Ω–Ω—ã–π –ø—É—Ç—å —è–≤–ª—è–µ—Ç—Å—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–µ–π")
            return

        file_size = path.stat().st_size
        if file_size > 20 * 1024 * 1024:
            await message.answer("‚ùå –§–∞–π–ª —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π (–º–∞–∫—Å–∏–º—É–º 20MB)")
            return

        with open(path, 'rb') as file:
            await message.answer_document(
                BufferedInputFile(file.read(), filename=path.name),
                caption=f"üì• –§–∞–π–ª: <code>{file_path}</code>"
            )
    except Exception as e:
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ñ–∞–π–ª–∞: {str(e)}")


@dp.callback_query(F.data == "cancel_action")
async def cancel_action(callback: CallbackQuery, state: FSMContext):
    await state.clear()
    await callback.message.edit_text("‚ùå –î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ")
    await callback.answer()


async def on_startup(bot: Bot):
    logger.info("–ë–æ—Ç –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è...")
    await notify_admins(bot)


async def on_shutdown(bot: Bot):
    logger.info("–ë–æ—Ç –≤—ã–∫–ª—é—á–∞–µ—Ç—Å—è...")
    for admin_id in ADMIN_IDS:
        try:
            await bot.send_message(admin_id, "üõë –ë–æ—Ç –≤—ã–∫–ª—é—á–∞–µ—Ç—Å—è...")
        except Exception as e:
            logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω—É {admin_id}: {str(e)}")


def main():
    dp.include_router(admin_router)
    dp.include_router(file_router)
    dp.include_router(command_router)

    dp.startup.register(on_startup)
    dp.shutdown.register(on_shutdown)

    try:
        logger.info("–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞...")
        dp.run_polling(bot)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞: {str(e)}")
    finally:
        logger.info("–ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")


if __name__ == '__main__':
    Path(DEFAULT_DOWNLOAD_DIR).mkdir(parents=True, exist_ok=True)
    main()